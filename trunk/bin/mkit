#!perl

use strict;
use warnings;

use ICG::CLI;
use ICG::Handy qw(are_emails smtpsend);
use icg2;
use YAML::Syck;
use Email::Address;
use Email::MIME::Kit;
use Sys::Hostname::Long;

my ($opt, $usage) = describe_options(
  "%c %o /path/to/mime.kit/",
  [ mode => [
    [ 'print'  => 'print to screen (default)' ],
    [ 'to=s' => 'send to given address' ],
  ], { default => 'print' } ],
  [],
  [ 'define|d=s%'      => 'define variables for kit assembly' ],
  [ 'define-yaml|D=s%' => 'define variables using YAML' ],
  [ 'no-prompt|N'      => "don't prompt for input for undefined variables" ],
  [],
  [ 'options for sending:' ],
  [ 'from=s' => 'envelope sender' ],
);

my $dir = shift(@ARGV) || X->toss("directory to mime.kit is required");

my $kit = Email::MIME::Kit->new($dir);

for my $key (keys %{$opt->{define_yaml}}) {
  $opt->{define}->{$key} = Load($opt->{define_yaml}->{$key});
}

for my $key (keys %{ $kit->validate }) {
  next if defined $opt->{define}->{$key};
  $opt->{define}->{$key} = Load(prompt_str(
    "value for '$key'",
    { valid => sub {
        length(shift) or 
          ref($kit->validate->{$key}) ?
            $kit->validate->{$key}->{optional} :
              not $kit->validate->{$key};
      },
    },
  ));
}

# XXX special cases
for my $special (
  [ account => sub { icg2->Account(@_) } ],
  [ client  => sub { icg2->Client(@_) } ],
  [ mypobox => sub { icg2->mypobox(@_) } ],
  [ self    => sub {
      my ($type, $id) = split /\s+/, shift;
      $type = ucfirst($type);
      icg2->$type($id);
    } ],
) {
  my ($arg, $code) = @$special;
  next unless $opt->{define}->{$arg};
  $opt->{define}->{$arg} = $code->($opt->{define}->{$arg});
}

my $mime = $kit->assemble($opt->{define});

main->can($opt->{mode})->($mime, $opt);

sub print {
  my ($mime, $opt) = @_;
  say $mime->as_string;
  return if $opt->{no_prompt} || $opt->{quiet};
  if (prompt_yn("send this message?", { default => "y" })) {
    my $default = 'someone@somewhere.com';
    $opt->{to} = prompt_str(
      "envelope recipients, separated by ','",
      {
        default => $default,
        no_valid_default => 1,
        valid   => sub { $_[0] ne $default && are_emails($_[0]) },
      },
    );
    to($mime, $opt);
  }
}

sub to {
  my ($mime, $opt) = @_;
  my $hdr_from = eval { 
    (Email::Address->parse($mime->header('From')))[0]->address
  };
  my $user_host = join('@', scalar(getpwuid($<)), hostname_long);

  my $from = $opt->{from} || $hdr_from || $user_host;

  unless ($opt->{no_prompt}) {
    $from = prompt_str(
      "envelope sender",
      { default => $from },
    );
  }

  smtpsend(
    $mime->as_string,
    from => $from,
    to   => [ split /\s*,\s*/, $opt->{to} ],
    host => 'localhost',
    port => 25,
  );
}
